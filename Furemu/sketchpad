'''
bom_name = 'bom1.json'
bom_directory = 'Environment/BoMs/'
with open(os.path.join(bom_directory, bom_name), 'r') as f:
    parts = json.load(f)

part_files = parts["parts"]
part_directory = 'Environment/Parts/'

        # Pre-allocate pandas DF
part_data = pd.DataFrame(columns = ['group', 'pn', 'geom_type', 'geom_xy', 'weight'])

        # 
for index, js in enumerate(part_files):
    with open(os.path.join(part_directory, js), 'r') as json_file:
        json_text = json.load(json_file)
        
        print(json_text)
                # here you need to know the layout of your json and each json has to have
                # the same structure (obviously not the structure I have here)
        group = json_text['Group']
        pn = json_text['PN']
        geom_type = json_text['Geom']['type']
        geom_xy = json_text['Geom']['coordinates']
        weight = json_text['Weight']
        part_data.loc[index] = [group, pn, geom_type, geom_xy, weight]
'''


'''
# Pygame screen geometry rendering example

import pygame

pygame.init()

# Define the colors we will use in RGB format
BLACK = (  0,   0,   0)
WHITE = (255, 255, 255)
BLUE =  (  0,   0, 255)
GREEN = (  0, 255,   0)
RED =   (255,   0,   0)
 
# Set the height and width of the screen
size = [400, 300]
screen = pygame.display.set_mode(size)
 
pygame.display.set_caption("Example code for the draw module")
 
#Loop until the user clicks the close button.
done = False
clock = pygame.time.Clock()
 
while not done:
 
    # This limits the while loop to a max of 10 times per second.
    # Leave this out and we will use all CPU we can.
    clock.tick(10)
     
    for event in pygame.event.get(): # User did something
        if event.type == pygame.QUIT: # If user clicked close
            done=True # Flag that we are done so we exit this loop
 
    # All drawing code happens after the for loop and but
    # inside the main while done==False loop.
     
    # Clear the screen and set the screen background
    screen.fill(WHITE)
 
    # Draw on the screen a GREEN line from (0,0) to (50.75) 
    # 5 pixels wide.
    pygame.draw.line(screen, GREEN, [0, 0], [50,30], 5)
 
    # Draw on the screen a GREEN line from (0,0) to (50.75) 
    # 5 pixels wide.
    pygame.draw.lines(screen, BLACK, False, [[0, 80], [50, 90], [200, 80], [220, 30]], 5)
    
    # Draw on the screen a GREEN line from (0,0) to (50.75) 
    # 5 pixels wide.
    pygame.draw.aaline(screen, GREEN, [0, 50],[50, 80], True)

    # Draw a rectangle outline
    pygame.draw.rect(screen, BLACK, [75, 10, 50, 20], 2)
     
    # Draw a solid rectangle
    pygame.draw.rect(screen, BLACK, [150, 10, 50, 20])
     

    # This draws a triangle using the polygon command
    pygame.draw.polygon(screen, BLACK, [[100, 100], [0, 200], [200, 200]], 5)
 
    # Go ahead and update the screen with what we've drawn.
    # This MUST happen after all the other drawing commands.
    pygame.display.flip()
 
# Be IDLE friendly
pygame.quit()
'''

